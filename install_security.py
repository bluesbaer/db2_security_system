#!/usr/bin/env python3

## Db2 Security-System
## Version 1.0
## Manfred Wagner
## info@manfred-wagner.at


import tkinter as tk
from tkinter import Variable, ttk, simpledialog, messagebox
import sec_db2

class CheckDbObjects():

    def __init__(self):
        pass

    def do_it(self,conn,sql) -> bool:
        conn.exec(sql)
        row = conn.fetch()
        if int(row['CNT']) > 0:
            return True
        else:
            return False


class CreateDbObjects():

    def __init__(self):
        pass

    def do_it(sself,conn,sql):
        conn.exec(sql)


class Gui(tk.Tk):

    def __init__(self):
        super().__init__()
        self.root = self
        self.root.title('Database Security System by M. Wagner')


class View(tk.Tk):

    def __init__(self):
        super().__init__()
        self.window = self
        self.window.title('Database Security System by M. Wagner')
        self.txt_chk = ''
        self.txt_crt = ''
        self.label_font = {'size':20,'weight':'BOLD'}


# -- ------------ --
# -- Basis Tables --
# -- ------------ --
T_USER = """
create table sec.t_user (
   usr_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   usr_name  varchar(200) not null,
   usr_connect varchar(200) not null,           -- for the asigned connect user
   usr_start date not null with default '2999-12-30',
   usr_end   date not null with default '2999-12-31',
   usr_mark  char(1) not null with default 'U', -- A=Admin,C=Connect,S=Secure,U=User
   primary key (usr_id),
   period business_time(usr_start,usr_end)
) in SECDAT04K index in SECIDX04K"""
T_ROLE = """
create table sec.t_role (
   rol_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   rol_name  varchar(200),
   rol_start date not null with default '2999-12-30',
   rol_end   date not null with default '2999-12-31',
   rol_description varchar(200),
   rol_type  varchar(8) not null with default 'RBAC',
   primary key (rol_id),
   period business_time(rol_start,rol_end)
) in SECDAT04K index in SECIDX04K"""
T_SCHEMA = """
create table sec.t_schema (
   sch_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   sch_name  varchar(200),
   sch_start date not null with default '2999-12-30',
   sch_end   date not null with default '2999-12-31',
   primary key (sch_id),
   period business_time(sch_start,sch_end)
) in SECDAT04K index in SECIDX04K"""
T_TABLE = """
create table sec.t_table (
   tbl_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   tbl_schema varchar(200),
   tbl_name  varchar(200),
   tbl_start date not null with default '2999-12-30',
   tbl_end   date not null with default '2999-12-31',
   primary key (tbl_id),
   period business_time(tbl_start,tbl_end)
) in SECDAT04K index in SECIDX04K"""
T_ROUTINE = """
create table sec.t_routine (
   rou_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   rou_schema varchar(200),
   rou_name  varchar(200),
   rou_start date not null with default '2999-12-30',
   rou_end   date not null with default '2999-12-31',
   rou_specific varchar(200),
   rou_type varchar(9) not null with default 'F',
   primary key (rou_id),
   period business_time(rou_start,rou_end)
) in SECDAT04K index in SECIDX04K"""
T_SEQUENCE = """
create table sec.t_sequence (
   seq_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   seq_schema varchar(200),
   seq_name  varchar(200),
   seq_start date not null with default '2999-12-30',
   seq_end   date not null with default '2999-12-31',
   primary key (seq_id),
   period business_time(seq_start,seq_end)
) in SECDAT04K index in SECIDX04K"""

# -- --------------- --
# -- Relation Tables --
# -- --------------- --
T_USR2ROL = """
create table sec.t_usr2rol (
   u2r_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   u2r_rol_id bigint not null,
   u2r_usr_id bigint not null,
   u2r_start date not null with default '2999-12-30',
   u2r_end   date not null with default '2999-12-31',
   primary key (u2r_id),
   period business_time(u2r_start,u2r_end)
) in SECDAT04K index in SECIDX04K"""
T_SCH2ROL = """
create table sec.t_sch2rol (
   s2r_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   s2r_rol_id bigint not null,
   s2r_sch_id bigint not null,
   s2r_schadm char(1) not null with default 'N',
   s2r_schsec char(1) not null with default 'N',
   s2r_start date not null with default '2999-12-30',
   s2r_end   date not null with default '2999-12-31',
   primary key (s2r_id),
   period business_time(s2r_start,s2r_end)
) in SECDAT04K index in SECIDX04K"""
T_TBL2ROL = """
create table sec.t_tbl2rol (
   t2r_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   t2r_rol_id bigint not null,
   t2r_tbl_id bigint not null,
   t2r_ctlauth char(1) not null with default 'N',
   t2r_delauth char(1) not null with default 'N',
   t2r_insauth char(1) not null with default 'N',
   t2r_selauth char(1) not null with default 'N',
   t2r_updauth char(1) not null with default 'N',
   t2r_start date not null with default '2999-12-30',
   t2r_end   date not null with default '2999-12-31',
   primary key (t2r_id),
   period business_time(t2r_start,t2r_end)
) in SECDAT04K index in SECIDX04K"""
T_ROU2ROL = """
create table sec.t_rou2rol (
   r2r_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   r2r_rol_id bigint not null,
   r2r_rou_id bigint not null,
   r2r_start date not null with default '2999-12-30',
   r2r_end   date not null with default '2999-12-31',
   primary key (r2r_id),
   period business_time(r2r_start,r2r_end)
) in SECDAT04K index in SECIDX04K"""
T_SEQ2ROL = """
create table sec.t_seq2rol (
   s2r_id    bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cycle),
   s2r_rol_id bigint not null,
   s2r_seq_id bigint not null,
   s2r_start date not null with default '2999-12-30',
   s2r_end   date not null with default '2999-12-31',
   primary key (s2r_id),
   period business_time(s2r_start,s2r_end)
) in SECDAT04K index in SECIDX04K"""

# -- --------------- --
# -- LOG TABLE       --
# -- --------------- --
T_LOG2 = """
CREATE TABLE sec.t_log2 (
   id bigint not null generated by default as identity (start with 1 increment by 1 no maxvalue no cache),
   sys_time   timestamp(12),
   sys_sql    varchar(1000),
   sys_state  char(5)
) IN secdat04k INDEX IN secidx04k"""

# -- --------------- --
# -- INDIZES         --
# -- --------------- --
X_USER = """
create unique index sec.x_user on sec.t_user (usr_id,business_time without overlaps)"""
X_ROLE = """
create unique index sec.x_role on sec.t_role (rol_id,business_time without overlaps)"""
X_SCHEMA = """
create unique index sec.x_schema on sec.t_schema (sch_id,business_time without overlaps)"""
X_TABLE = """
create unique index sec.x_table on sec.t_table (tbl_id,business_time without overlaps)"""
X_ROUTINE = """
create unique index sec.x_routine on sec.t_routine (rou_id,business_time without overlaps)"""
X_SEQUENCE = """
create unique index sec.x_sequence on sec.t_sequence (seq_id,business_time without overlaps)"""
X_USR2ROL = """
create unique index sec.x_usr2rol on sec.t_usr2rol (u2r_id,business_time without overlaps)"""
X_SCH2ROL = """
create unique index sec.x_sch2rol on sec.t_sch2rol (s2r_id,business_time without overlaps)"""
X_TBL2ROL = """
create unique index sec.x_tbl2rol on sec.t_tbl2rol (t2r_id,business_time without overlaps)"""
X_ROU2ROL = """
create unique index sec.x_rou2rol on sec.t_rou2rol (r2r_id,business_time without overlaps)"""
X_SEQ2ROL = """
create unique index sec.x_seq2rol on sec.t_seq2rol (s2r_id,business_time without overlaps)"""
X_LOG2 = """
create unique index sec.x_log2 on sec.t_log2 (id)"""

X_ROLE_U = """
CREATE UNIQUE INDEX SEC.X_ROLE_U ON SEC.T_ROLE (ROL_NAME)"""
X_ROUTINE_U = """
CREATE UNIQUE INDEX SEC.X_ROUTINE_U ON SEC.T_ROUTINE (ROU_SCHEMA,ROU_NAME,ROU_SPECIFIC)"""
X_SCHEMA_U = """
CREATE UNIQUE INDEX SEC.X_SCHEMA_U ON SEC.T_SCHEMA (SCH_NAME)"""
X_SEQUENCE_U = """
CREATE UNIQUE INDEX SEC.X_SEQUENCE_U ON SEC.T_SEQUENCE (SEQ_SCHEMA,SEQ_NAME)"""
X_TABLE_U = """
CREATE UNIQUE INDEX SEC.X_TABLE_U ON SEC.T_TABLE (TBL_SCHEMA,TBL_NAME)"""
X_USER_U = """
CREATE UNIQUE INDEX SEC.X_USER_U ON SEC.T_USER (USR_NAME)"""
X_ROU2ROL_U = """
CREATE UNIQUE INDEX SEC.X_ROU2ROL_U ON SEC.T_ROU2ROL (R2R_ROL_ID,R2R_ROU_ID)"""
X_SCH2ROL_U = """
CREATE UNIQUE INDEX SEC.X_SCH2ROL_U ON SEC.T_SCH2ROL (S2R_ROL_ID,S2R_SCH_ID)"""
X_SEQ2ROL_U = """
CREATE UNIQUE INDEX SEC.X_SEQ2ROL_U ON SEC.T_SEQ2ROL (S2R_ROL_ID,S2R_SEQ_ID)"""
X_TBL2ROL_U = """
CREATE UNIQUE INDEX SEC.X_TBL2ROL_U ON SEC.T_TBL2ROL (T2R_ROL_ID,T2R_TBL_ID)"""
X_USR2ROL_U = """
CREATE UNIQUE INDEX SEC.X_USR2ROL_U ON SEC.T_USR2ROL (U2R_ROL_ID,U2R_USR_ID)"""

# -- ---------------- --
# -- Supporting Views --
# -- ---------------- --
# -- ** PSEUDO-SYSTEM
V_ROUTINEAUTH = """
CREATE OR REPLACE VIEW sec.v_routineauth (SCHEMA,specificname,routinetype,grantee,granteetype,procname) AS
SELECT ra.SCHEMA,ra.specificname,ra.routinetype,ra.grantee,ra.granteetype,COALESCE(pc.procname,fc.funcname)
FROM syscat.routineauth AS ra LEFT OUTER JOIN syscat.procedures AS pc ON (ra.SCHEMA,ra.specificname) = (pc.procschema,pc.specificname)
                              LEFT OUTER JOIN syscat.functions  AS fc ON (ra.SCHEMA,ra.specificname) = (fc.funcschema,fc.specificname)
WHERE ra.SCHEMA IN (SELECT rou_schema FROM sec.t_routine)
AND ra.granteetype = 'R'"""
# -- ** SIMPLIFY **
V_USR2ROL = """
CREATE OR REPLACE VIEW sec.v_usr2rol (u2r_id,u2r_start,u2r_end,usr_id,usr_name,usr_connect,usr_start,usr_end,
       rol_id,rol_name,rol_start,rol_end,s2r_id,s2r_start,s2r_end,sch_name,sch_start,sch_end) AS
SELECT u2r_id,u2r_start,u2r_end,
       usr_id,usr_name,usr_connect,usr_start,usr_end,
       rol_id,rol_name,rol_start,rol_end,
       s2r_id,s2r_start,s2r_end,
       sch_name,sch_start,sch_end
FROM sec.t_usr2rol LEFT OUTER JOIN sec.t_user    ON (u2r_usr_id) = (usr_id)
                   LEFT OUTER JOIN sec.t_role    ON (u2r_rol_id) = (rol_id)
                   LEFT OUTER JOIN sec.t_sch2rol ON (rol_id) = (s2r_rol_id)
                   LEFT OUTER JOIN sec.t_schema  ON (s2r_sch_id) = (sch_id)
                   """
V_SCH2ROL = """
create or replace view sec.v_sch2rol (sch_id,sch_name,sch_start,sch_end,rol_id,rol_name,rol_start,rol_end,s2r_id,s2r_schadm,s2r_schsec,s2r_start,s2r_end) as
select sch_id,sch_name,sch_start,sch_end,rol_id,rol_name,rol_start,rol_end,s2r_id,s2r_schadm,s2r_schsec,s2r_start,s2r_end
from sec.t_sch2rol left outer join sec.t_schema on s2r_sch_id = sch_id
                   left outer join sec.t_role   on s2r_rol_id = rol_id"""
V_TBL2ROL = """
CREATE OR REPLACE VIEW sec.v_tbl2rol (t2r_id,t2r_start,t2r_end,t2r_ctlauth,t2r_delauth,t2r_insauth,t2r_selauth,t2r_updauth,
       tbl_id,tbl_schema,tbl_name,tbl_start,tbl_end,rol_id,rol_name,rol_start,rol_end) AS
SELECT t2r_id,t2r_start,t2r_end,t2r_ctlauth,t2r_delauth,t2r_insauth,t2r_selauth,t2r_updauth,
       tbl_id,tbl_schema,tbl_name,tbl_start,tbl_end,
       rol_id,rol_name,rol_start,rol_end
FROM sec.t_tbl2rol LEFT OUTER JOIN sec.t_table ON (t2r_tbl_id) = (tbl_id)
                   LEFT OUTER JOIN sec.t_role  ON (t2r_rol_id) = (rol_id)
                   """
V_ROU2ROL = """
CREATE OR REPLACE VIEW sec.v_rou2rol (r2r_id,r2r_start,r2r_end,rou_id,rou_schema,rou_name,rou_specific,rou_start,rou_end,rou_type,
       rol_id,rol_name,rol_start,rol_end) AS
SELECT r2r_id,r2r_start,r2r_end,
       rou_id,rou_schema,rou_name,rou_specific,rou_start,rou_end,rou_type,
       rol_id,rol_name,rol_start,rol_end
FROM sec.t_rou2rol LEFT OUTER JOIN sec.t_routine ON (r2r_rou_id) = (rou_id)
                   LEFT OUTER JOIN sec.t_role    ON (r2r_rol_id) = (rol_id)
                   """
V_SEQ2ROL = """
CREATE OR REPLACE VIEW sec.v_seq2rol (s2r_id,s2r_start,s2r_end,seq_id,seq_schema,seq_name,seq_start,seq_end,
       rol_id,rol_name,rol_start,rol_end) AS 
SELECT s2r_id,s2r_start,s2r_end,
       seq_id,seq_schema,seq_name,seq_start,seq_end,
       rol_id,rol_name,rol_start,rol_end
FROM sec.t_seq2rol LEFT OUTER JOIN sec.t_sequence ON (s2r_seq_id) = (seq_id)
                   LEFT OUTER JOIN sec.t_role     ON (s2r_rol_id) = (rol_id)
                   """
# -- ** REVOKE **
V_REVOKE_USER = """
CREATE OR REPLACE VIEW sec.v_revoke_user (action,surrogateauthid,trustedid) AS
SELECT 'REVOKE',surrogateauthid,trustedid
FROM syscat.surrogateauthids LEFT OUTER JOIN sec.t_user ON (surrogateauthid) = (usr_name)
WHERE surrogateauthidtype = 'U'
AND grantor = session_user
AND current date NOT BETWEEN usr_start AND usr_end
"""
V_REVOKE_ROLE = """
create or replace view sec.v_revoke_role (action,rol_name) as
select 'REVOKE',sys.rolename
from syscat.roles as sys left outer join sec.t_role as sec on sys.rolename = sec.rol_name
where sec.rol_name is NULL
AND sys.roleid >= 1000"""
V_REVOKE_ROLE_ACCESS = """
CREATE OR REPLACE VIEW sec.v_revoke_role_access (action,rolename,grantee) AS
SELECT 'REVOKE',rolename,grantee
FROM syscat.roleauth LEFT OUTER JOIN sec.v_usr2rol ON (rolename) = (rol_name)
WHERE grantortype <> 'S'
AND grantor = session_user
AND (current date NOT BETWEEN usr_start AND usr_end OR
     current date NOT BETWEEN rol_start AND rol_end OR
     current date NOT BETWEEN u2r_start AND u2r_end)
     """
V_REVOKE_TABLE_ACCESS = """
CREATE OR REPLACE VIEW sec.v_revoke_table_access (action,tabschema,tabname,grantee,
                controlauth,deleteauth,insertauth,selectauth,updateauth,
                t2r_ctlauth,t2r_delauth,t2r_insauth,t2r_selauth,t2r_updauth,
                t2r_start,t2r_end,tbl_start,tbl_end,rol_start,rol_end) AS
SELECT 'REVOKE',tabschema,tabname,grantee,
                controlauth,deleteauth,insertauth,selectauth,updateauth,
                t2r_ctlauth,t2r_delauth,t2r_insauth,t2r_selauth,t2r_updauth,
                t2r_start,t2r_end,tbl_start,tbl_end,rol_start,rol_end
FROM syscat.tabauth LEFT OUTER JOIN sec.v_tbl2rol ON (tabschema,tabname) = (tbl_schema,tbl_name)
WHERE grantortype <> 'S'
AND grantor = session_user
AND granteetype = 'R'
"""
V_REVOKE_ROUTINE_ACCESS = """
CREATE OR REPLACE VIEW sec.v_revoke_routine_access (action,schema,specificname,grantee,routinetype) AS
SELECT 'REVOKE',schema,specificname,grantee,routinetype
FROM syscat.routineauth LEFT OUTER JOIN sec.v_rou2rol ON (schema,specificname) = (rou_schema,rou_specific)
WHERE grantortype <> 'S'
AND grantor = session_user
AND granteetype = 'R'
AND (current date NOT BETWEEN r2r_start AND r2r_end OR
     current date NOT BETWEEN rou_start AND rou_end OR
     current date NOT BETWEEN rol_start AND rol_end)
     """
V_REVOKE_SEQUENCE_ACCESS = """
CREATE OR REPLACE VIEW sec.v_revoke_sequence_access (action,seqschema,seqname,grantee) AS
SELECT 'REVOKE',seqschema,seqname,grantee
FROM syscat.sequenceauth LEFT OUTER JOIN sec.v_seq2rol ON (seqschema,seqname) = (seq_schema,seq_name)
WHERE grantortype <> 'S'
AND grantor = session_user
AND granteetype = 'R'
AND (current date NOT BETWEEN s2r_start AND s2r_end OR
     current date NOT BETWEEN seq_start AND seq_end OR
     current date NOT BETWEEN rol_start AND rol_end)
     """
# -- ** GRANT **
V_GRANT_USER = """
CREATE OR REPLACE VIEW sec.v_grant_user (action,usr_name,usr_connect) AS
SELECT 'GRANT',usr_name,usr_connect
FROM sec.t_user LEFT OUTER JOIN syscat.surrogateauthids ON (usr_name) = (surrogateauthid)
WHERE usr_id > 0
AND surrogateauthid IS NULL
AND current date BETWEEN usr_start AND usr_end
"""
V_GRANT_ROLE = """
create or replace view sec.v_grant_role (action,rol_name) as
select 'CREATE',sec.rol_name
from sec.t_role as sec left outer join syscat.roles as sys on sec.rol_name = sys.rolename
where sys.rolename is NULL
AND sec.rol_id > 0
AND current date BETWEEN rol_start AND rol_end
"""
V_GRANT_ROLE_ACCESS = """
CREATE OR REPLACE VIEW sec.v_grant_role_access (action,rol_name,usr_name) AS
SELECT 'GRANT',rol_name,usr_name
FROM sec.v_usr2rol LEFT OUTER JOIN syscat.roleauth ON (rol_name) = (rolename) AND grantortype <> 'S'
WHERE rolename IS NULL
AND (current date BETWEEN u2r_start AND u2r_end AND
     current date BETWEEN usr_start AND usr_end AND
     current date BETWEEN rol_start AND rol_end)
     """
V_GRANT_TABLE_ACCESS = """
CREATE OR REPLACE VIEW sec.v_grant_table_access (action,tbl_schema,tbl_name,rol_name,
               t2r_ctlauth,t2r_delauth,t2r_insauth,t2r_selauth,t2r_updauth,
               controlauth,deleteauth,insertauth,selectauth,updateauth,
               t2r_start,t2r_end,tbl_start,tbl_end,rol_start,rol_end) AS
SELECT 'GRANT',tbl_schema,tbl_name,rol_name,
               t2r_ctlauth,t2r_delauth,t2r_insauth,t2r_selauth,t2r_updauth,
               controlauth,deleteauth,insertauth,selectauth,updateauth,
               t2r_start,t2r_end,tbl_start,tbl_end,rol_start,rol_end
FROM sec.v_tbl2rol LEFT OUTER JOIN syscat.tabauth ON (tbl_schema,tbl_name) = (tabschema,tabname) AND grantortype <> 'S'
"""
V_GRANT_ROUTINE_ACCESS ="""
CREATE OR REPLACE VIEW sec.v_grant_routine_access (action,rou_schema,rou_specific,rol_name,rou_type) AS
SELECT 'GRANT',rou_schema,rou_specific ,rol_name,rou_type
FROM sec.v_rou2rol LEFT OUTER JOIN syscat.routineauth ON (rou_schema,rou_specific) = (schema,specificname) AND grantortype <> 'S'
WHERE specificname IS NULL
AND (current date BETWEEN r2r_start AND r2r_end AND
     current date BETWEEN rou_start AND rou_end AND
     current date BETWEEN rol_start AND rol_end)
     """
V_GRANT_SEQUENCE_ACCESS ="""
CREATE OR REPLACE VIEW sec.v_grant_sequence_access (action,seq_schema,seq_name,rol_name) AS 
SELECT 'GRANT',seq_schema,seq_name,rol_name
FROM sec.v_seq2rol LEFT OUTER JOIN syscat.sequenceauth ON (seq_schema,seq_name) = (seqschema,seqname) AND grantortype <> 'S'
WHERE seqname IS NULL
AND (current date BETWEEN s2r_start AND s2r_end AND
     current date BETWEEN seq_start AND seq_end AND
     current date BETWEEN rol_start AND rol_end)
     """

# -- --------------------------------------------------------------------------------
# -- SECURITY PROCEDURE
# -- --------------------------------------------------------------------------------
SECURITY2 = """
CREATE OR REPLACE PROCEDURE SEC.SECURITY2()
LANGUAGE SQL
SPECIFIC SECURITY2
MODIFIES SQL DATA
BEGIN
   DECLARE v_user VARCHAR(100);
   DECLARE v_rule VARCHAR(100);
   DECLARE v_sql VARCHAR(1000);
   DECLARE v_rou_typ VARCHAR(20);

   -- For Tracing Purpose in Terminal type in 
   -- SET SERVEROUTPUT ON

   -- SELECT session_user INTO v_user FROM sysibm.sysdummy1;
   -- SELECT secpolicyname INTO v_rule FROM syscat.securitypolicies;

   -- MAIN PROGRAM
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** BEGIN ***',0);
   -- ----------- --
   -- REVOKE USER --
   -- ----------- --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   CALL DBMS_OUTPUT.PUT_LINE('REVOKE USER');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** REVOKE USER ***',0);
   FOR v_row AS SELECT * FROM sec.v_revoke_user
   DO
      SET v_sql = v_row.action || ' SETSESSIONUSER FOR USER ' || strip(v_row.surrogateauthid) || ' FROM USER ' || v_row.trustedid;
      CALL DBMS_OUTPUT.PUT_LINE(v_sql);
      EXECUTE IMMEDIATE v_sql;
      INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
   END FOR;

   -- ----------- --
   -- REVOKE ROLE --
   -- ----------- --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   CALL DBMS_OUTPUT.PUT_LINE('REVOKE ROLE ACCESS');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** REVOKE ROLE ACCESS ***',0);
   FOR v_row AS SELECT * FROM sec.v_revoke_role_access
   DO
      SET v_sql = v_row.action || ' ROLE ' || strip(v_row.rolename) || ' FROM USER ' || v_row.grantee;
      CALL DBMS_OUTPUT.PUT_LINE(v_sql);
      EXECUTE IMMEDIATE v_sql;
      INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
   END FOR;

   -- ------------ --
   -- REVOKE TABLE --
   -- ------------ --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   CALL DBMS_OUTPUT.PUT_LINE('REVOKE TABLE ACCESS');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** REVOKE TABLE ACCESS ***',0);
   FOR v_row AS SELECT * FROM sec.v_revoke_table_access
   DO
      IF current date NOT BETWEEN v_row.t2r_start AND v_row.t2r_end OR
         current date NOT BETWEEN v_row.tbl_start AND v_row.tbl_end OR
         current date NOT BETWEEN v_row.rol_start AND v_row.rol_end
      THEN
         IF t2r_ctlauth = 'Y'
         THEN
            SET v_sql = v_row.action || ' CONTROL ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF t2r_delauth = 'Y'
         THEN
            SET v_sql = v_row.action || ' DELETE ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF t2r_insauth = 'Y'
         THEN
            SET v_sql = v_row.action || ' INSERT ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF t2r_selauth = 'Y'
         THEN
            SET v_sql = v_row.action || ' SELECT ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF t2r_updauth = 'Y'
         THEN
            SET v_sql = v_row.action || ' UPDATE ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
      ELSE
         IF v_row.controlauth = 'Y' AND v_row.t2r_ctlauth = 'N'
         THEN
            SET v_sql = v_row.action || ' CONTROL ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF v_row.deleteauth = 'Y' AND v_row.t2r_delauth = 'N'
         THEN
            SET v_sql = v_row.action || ' DELETE ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF v_row.insertauth = 'Y' AND v_row.t2r_insauth = 'N'
         THEN
            SET v_sql = v_row.action || ' INSERT ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF v_row.selectauth = 'Y' AND v_row.t2r_selauth = 'N'
         THEN
            SET v_sql = v_row.action || ' SELECT ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF v_row.updateauth = 'Y' AND v_row.t2r_updauth = 'N'
         THEN
            SET v_sql = v_row.action || ' UPDATE ON TABLE ' || strip(v_row.tabschema) || '.' || v_row.tabname || ' FROM ROLE ' || v_row.grantee;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
      END IF;
   END FOR;

   -- -------------- --
   -- REVOKE ROUTINE --
   -- -------------- --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   CALL DBMS_OUTPUT.PUT_LINE('REVOKE ROUTINE ACCESS');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** REVOKE ROUTINE ACCESS ***',0);
   FOR v_row AS SELECT * FROM sec.v_revoke_routine_access
   DO
      IF v_row.routinetype = 'F'
      THEN
         SET v_rou_typ = 'FUNCTION';
      ELSE
         SET v_rou_typ = 'PROCEDURE';
      END IF;
      SET v_sql = v_row.action || ' EXECUTE ON SPECIFIC ' || v_rou_typ || ' ' || strip(v_row.schema) || '.' || v_row.specificname || ' FROM ROLE ' || v_row.grantee || ' RESTRICT';
      CALL DBMS_OUTPUT.PUT_LINE(v_sql);
      EXECUTE IMMEDIATE v_sql;
      INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
   END FOR;

   -- --------------- --
   -- REVOKE SEQUENCE --
   -- --------------- --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   CALL DBMS_OUTPUT.PUT_LINE('REVOKE SEQUENCE ACCESS');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** REVOKE SEQUENCE ACCESS ***',0);
   FOR v_row AS SELECT * FROM sec.v_revoke_sequence_access
   DO
      SET v_sql = v_row.action || ' USAGE ON SEQUENCE ' || strip(v_row.seqschema) || '.' || v_row.seqname || ' FROM ROLE ' || v_row.grantee;
      CALL DBMS_OUTPUT.PUT_LINE(v_sql);
      EXECUTE IMMEDIATE v_sql;
      INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
   END FOR;

   -- ---------- --
   -- GRANT USER --
   -- ---------- --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   CALL DBMS_OUTPUT.PUT_LINE('GRANT USER');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** GRANT USER ***',0);
   FOR v_row AS SELECT * FROM sec.v_grant_user
   DO
      SET v_sql = v_row.action || ' SETSESSIONUSER ON USER ' || strip(v_row.usr_name) || ' TO USER ' || v_row.usr_connect;
      CALL DBMS_OUTPUT.PUT_LINE(v_sql);
      EXECUTE IMMEDIATE v_sql;
      INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
   END FOR;

   -- ---------- --
   -- GRANT ROLE --
   -- ---------- --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   
   CALL DBMS_OUTPUT.PUT_LINE('CREATE ROLE');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** CREATE ROLE ***',0);
   FOR v_row AS SELECT * FROM sec.v_grant_role
   DO
      SET v_sql = 'CREATE ROLE ' || v_row.rol_name;
      CALL DBMS_OUTPUT.PUT_LINE(v_sql);
      EXECUTE IMMEDIATE v_sql;
      INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
   END FOR;

   CALL DBMS_OUTPUT.PUT_LINE('GRANT ROLE ACCESS');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** GRANT ROLE ACCESS ***',0);
   FOR v_row AS SELECT * FROM sec.v_grant_role_access
   DO
      SET V_sql = v_row.action || ' ROLE ' || strip(v_row.rol_name) || ' TO USER ' || v_row.usr_name;
      CALL DBMS_OUTPUT.PUT_LINE(v_sql);
      EXECUTE IMMEDIATE v_sql;
      INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
   END FOR;

   -- ----------- --
   -- GRANT TABLE --
   -- ----------- --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   CALL DBMS_OUTPUT.PUT_LINE('GRANT TABLE ACCESS');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** GRANT TABLE ACCESS ***',0);
   FOR v_row AS SELECT * FROM sec.v_grant_table_access
   DO
      IF current date BETWEEN v_row.t2r_start AND v_row.t2r_end AND
         current date BETWEEN v_row.tbl_start AND v_row.tbl_end AND
         current date BETWEEN v_row.rol_start AND v_row.rol_end
      THEN
         IF v_row.t2r_ctlauth = 'Y' AND (v_row.controlauth = 'N' OR v_row.controlauth IS NULL)
         THEN
            SET v_sql = v_row.action || ' CONTROL ON TABLE ' || strip(v_row.tbl_schema) || '.' || v_row.tbl_name || ' TO ROLE ' || v_row.rol_name;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF v_row.t2r_delauth = 'Y' AND (v_row.deleteauth = 'N' OR v_row.deleteauth IS NULL)
         THEN
            SET v_sql = v_row.action || ' DELETE ON TABLE ' || strip(v_row.tbl_schema) || '.' || v_row.tbl_name || ' TO ROLE ' || v_row.rol_name;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF v_row.t2r_insauth = 'Y' AND (v_row.insertauth = 'N' OR v_row.insertauth IS NULL)
         THEN
            SET v_sql = v_row.action || ' INSERT ON TABLE ' || strip(v_row.tbl_schema) || '.' || v_row.tbl_name || ' TO ROLE ' || v_row.rol_name;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF v_row.t2r_selauth = 'Y' AND (v_row.selectauth = 'N' OR v_row.selectauth IS NULL)
         THEN
            SET v_sql = v_row.action || ' SELECT ON TABLE ' || strip(v_row.tbl_schema) || '.' || v_row.tbl_name || ' TO ROLE ' || v_row.rol_name;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
         IF v_row.t2r_updauth = 'Y' AND (v_row.updateauth = 'N' OR v_row.updateauth IS NULL)
         THEN
            SET v_sql = v_row.action || ' UPDATE ON TABLE ' || strip(v_row.tbl_schema) || '.' || v_row.tbl_name || ' TO ROLE ' || v_row.rol_name;
            CALL DBMS_OUTPUT.PUT_LINE(v_sql);
            EXECUTE IMMEDIATE v_sql;
            INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
         END IF;
      END IF;
   END FOR;

   -- ------------- --
   -- GRANT ROUTINE --
   -- ------------- --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   CALL DBMS_OUTPUT.PUT_LINE('GRANT ROUTINE ACCESS');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** GRANT ROUTINE ACCESS ***',0);
   FOR v_row AS SELECT * FROM sec.v_grant_routine_access
   DO
      IF v_row.rou_type = 'F'
      THEN
         SET v_rou_typ = 'FUNCTION';
      ELSE
         SET v_rou_typ = 'PROCEDURE';
      END IF;
      SET v_sql = v_row.action || ' EXECUTE ON SPECIFIC ' || v_rou_typ || ' ' || strip(v_row.rou_schema) || '.' || v_row.rou_specific || ' TO ROLE ' || v_row.rol_name;
      CALL DBMS_OUTPUT.PUT_LINE(v_sql);
      EXECUTE IMMEDIATE v_sql;
      INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
   END FOR;

   -- -------------- --
   -- GRANT SEQUENCE --
   -- -------------- --
   CALL DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------------------------------');
   CALL DBMS_OUTPUT.PUT_LINE('GRANT SEQUENCE ACCESS');
   INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,'*** GRANT SEQUENCE ACCESS ***',0);
   FOR v_row AS SELECT * FROM sec.v_grant_sequence_access
   DO
      SET v_sql = v_row.action || ' USAGE ON SEQUENCE ' || strip(v_row.seq_schema) || '.' || v_row.seq_name || ' TO ROLE ' || v_row.rol_name;
      CALL DBMS_OUTPUT.PUT_LINE(v_sql);
      EXECUTE IMMEDIATE v_sql;
      INSERT INTO sec.t_log2 (sys_time, sys_sql, sys_state) VALUES (CURRENT TIMESTAMP,v_sql,0);
   END FOR;
   INSERT INTO sec.t_log2 (sys_time,sys_sql,sys_state) VALUES (CURRENT TIMESTAMP,'*** END ***',0);
   
END"""



class Setup():

    def __init__(self,gui):
        self.check  = CheckDbObjects()
        self.create = CreateDbObjects()
        self.gui    = gui
        self.view_master()
        self.CHECK_TXT:dict = {1:'yes',0:'no'}
        self.CREAT_TXT:dict = {1:'no',0:'yes'}

    def view_master(self):
        self.frm = ttk.LabelFrame(self.gui,text='Setup Screen')
        self.frm.grid(row=0,column=0,padx=3,pady=3,sticky=('N','E','S','W'))
        ttk.Label(self.frm,text='Server').grid(row=0,column=0,padx=3,pady=3,sticky=('E','W'))
        ttk.Label(self.frm,text='Port').grid(row=0,column=1,padx=3,pady=3,sticky=('E','W'))
        ttk.Label(self.frm,text='Database').grid(row=0,column=2,padx=3,pady=3,sticky=('E','W'))
        self.server = ttk.Entry(self.frm)
        self.server.grid(row=1,column=0,padx=3,pady=3,sticky=('E','W'))
        self.port = ttk.Entry(self.frm)
        self.port.grid(row=1,column=1,padx=3,pady=3,sticky=('E','W'))
        self.database = ttk.Entry(self.frm)
        self.database.grid(row=1,column=2,padx=3,pady=3,sticky=('E','W'))
        #
        ttk.Label(self.frm,text='SSL-Path').grid(row=2,column=0,padx=3,pady=3,sticky=('E','W'))
        ttk.Label(self.frm,text='SSL-Key').grid(row=2,column=1,padx=3,pady=3,sticky=('E','W'))
        ttk.Label(self.frm,text='SSL-Stash').grid(row=2,column=2,padx=3,pady=3,sticky=('E','W'))
        self.ssl_pth = ttk.Entry(self.frm)
        self.ssl_pth.grid(row=3,column=0,padx=3,pady=3,sticky=('E','W'))
        self.ssl_key = ttk.Entry(self.frm)
        self.ssl_key.grid(row=3,column=1,padx=3,pady=3,sticky=('E','W'))
        self.ssl_sth = ttk.Entry(self.frm)
        self.ssl_sth.grid(row=3,column=2,padx=3,pady=3,sticky=('E','W'))
        #
        ttk.Label(self.frm,text='Connect-User').grid(row=4,column=0,padx=3,pady=3,sticky=('E','W'))
        ttk.Label(self.frm,text='Admin-User').grid(row=4,column=1,padx=3,pady=3,sticky=('E','W'))
        ttk.Label(self.frm,text='Security-User').grid(row=4,column=2,padx=3,pady=3,sticky=('E','W'))
        self.con_usr = ttk.Entry(self.frm)
        self.con_usr.grid(row=5,column=0,padx=3,pady=3,sticky=('E','W'))
        self.adm_usr = ttk.Entry(self.frm)
        self.adm_usr.grid(row=5,column=1,padx=3,pady=3,sticky=('E','W'))
        self.sec_usr = ttk.Entry(self.frm)
        self.sec_usr.grid(row=5,column=2,padx=3,pady=3,sticky=('E','W'))
        #
        self.Bt1 = tk.Button(self.frm,text='START',command=self.start_install)
        self.Bt1.grid(row=10,column=0,padx=3,pady=3,sticky=('E','W'),columnspan=3)
        self.Bt1.bind('<Button-1>',self.start_install)
        self.server.focus()

    def start_install(self,*args):
        if self.connect_instance_user():
            if self.connect_connect_user():
                self.install_routine()

    def connect_instance_user(self) -> bool:
        flag:bool = False
        tmp_usr = simpledialog.askstring(title="User",prompt="NAME for the INSTANCE user")
        tmp_pwd = simpledialog.askstring(title="Password",prompt="PASSWORD for the INSTANCE user",show="*")
        ssl_tmp:str = ""
        if self.ssl_pth.get():
            if self.ssl_key.get():
                ssl_tmp += "SSLClientKeystoredb="+self.ssl_pth.get()+"/"+self.ssl_key.get()+";"
            if self.ssl_sth.get():
                ssl_tmp += "SSLClientKeystash="+self.ssl_pth.get()+"/"+self.ssl_sth.get()
                tmp_ssl = ";SECURITY=ssl;" + ssl_tmp
        self.ins_db2 = sec_db2.Db2()
        self.iconn = self.ins_db2.open(self.server.get(),self.port.get(),self.database.get(),ssl_tmp,tmp_usr,tmp_pwd)
        if self.iconn == True:
            sql = "SELECT SESSION_USER as SESSION_USER FROM SYSIBM.SYSDUMMY1"
            self.ins_db2.exec(sql)
            session_user = self.ins_db2.fetch()
            session_user = session_user['SESSION_USER']
            session_user = session_user.strip()
            sql = "SELECT SYSPROC.AUTH_GET_INSTANCE_AUTHID() AS INSTANCE_USER FROM SYSIBM.SYSDUMMY1"
            self.ins_db2.exec(sql)
            instance_user = self.ins_db2.fetch()
            instance_user = instance_user['INSTANCE_USER']
            if session_user == instance_user:
                flag = True
            else:
                messagebox.showerror("ERROR","This is not the Instance-User")
                self.ins_db2.close()
        return flag

    def connect_connect_user(self) -> bool:
        flag = False
        tmp_usr = self.con_usr.get()
        tmp_usr = tmp_usr.upper()
        tmp_pwd = simpledialog.askstring(title="Password",prompt="PASSWORD for the CONNECT user",show="*")
        ssl_tmp:str = ""
        if self.ssl_pth.get():
            if self.ssl_key.get():
                ssl_tmp += f"{self.ssl_pth.get()}/{self.ssl_key.get()} "
            if self.ssl_sth.get():
                ssl_tmp += f"{self.ssl_pth.get()}/{self.ssl_sth.get()}"
        self.con_db2 = sec_db2.Db2()
        self.cconn = self.con_db2.open(self.server.get(),self.port.get(),self.database.get(),ssl_tmp,tmp_usr,tmp_pwd)
        if self.cconn == True:
            flag = True
        return flag

    # --------------------------------------------------------------------------------


    def install_routine(self):
        #view = tk.Tk()
        view = self.frm
        #scrollbar   = tk.Scrollbar(view,orient='vertical')
        #scrollbar.grid(row=0,column=5,sticky=('N','S'))
        self.container = tk.Listbox(view) # ,yscrollcommand = scrollbar.set
        self.container.grid(row=10,column=0,columnspan=3,sticky=('N','E','S','W'))
        #scrollbar.config(command = self.container.yview)
        # Bufferpool
        print("-- BUFFERPOOL --")
        nr = self.create_bufferpool(0,0)
        ## Tablespace
        print("-- TABLESPACES --")
        nr = self.create_tablespace(nr,0)
        ## konfigurieren der Systemuser
        print("-- SYSTEMUSERS --")
        nr = self.config_systemuser(nr,0)
        ## Switch to adm_usr
        self.switch_to_adm_usr()
        ## Anlegen der Tabellen
        print("-- TABLES --")
        nr = self.create_table(nr,0)
        ## Anlegen der Indexe
        print("-- INDEXES --")
        nr = self.create_index(0,4)
        ## Anlegen der Views
        print("-- VIEWS --")
        nr = self.create_view(0,8)
        ## Anlegen der Security-Procedure
        print("-- SECURITY PROCEDURE --")
        self.create_security_proc(nr,8)
        ## Berechtigungsvergabe für sec_usr
        print("-- GRANTS --")
        self.grant_sec_usr()
        ## Insert der Standardwerte
        print("-- DEFAULTS --")
        self.insert_defaults()
        ## fertig

    def create_bufferpool(self,row_num=0, col_num=0):
        tk.Label(self.container,text='Bufferpool',font=(22),fg='blue').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Check',font=(22),fg='blue').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Create',font=(22),fg='blue').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        tk.Label(self.container,text="BPSEC04K",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
        check_sql = "SELECT count(*) AS cnt FROM syscat.bufferpools WHERE bpname ='BPSEC04K'"
        if self.check.do_it(self.ins_db2,check_sql):
            status = 1
        else:
            create_sql = "CREATE BUFFERPOOL BPSEC04K PAGESIZE 4 K"
            self.create.do_it(self.ins_db2,create_sql)
            status = 0
        tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        return row_num

    def create_tablespace(self,row_num=0, col_num=0):
        tk.Label(self.container,text='Tablespace',font=(22),fg='blue').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Check',font=(22),fg='blue').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Create',font=(22),fg='blue').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        tk.Label(self.container,text="SECDAT04K",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
        check_sql = "SELECT count(*) AS cnt FROM syscat.tablespaces WHERE tbspace = 'SECDAT04K'"
        if self.check.do_it(self.ins_db2,check_sql):
            status = 1
        else:
            create_sql = "CREATE LARGE TABLESPACE SECDAT04K PAGESIZE 4 K BUFFERPOOL BPSEC04K"
            self.create.do_it(self.ins_db2,create_sql)
            status = 0
        tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        tk.Label(self.container,text="SECIDX04K",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
        check_sql = "SELECT count(*) AS cnt FROM syscat.tablespaces WHERE tbspace = 'SECIDX04K'"
        if self.check.do_it(self.ins_db2,check_sql):
            status = 1
        else:
            create_sql = "CREATE LARGE TABLESPACE SECIDX04K PAGESIZE 4 K BUFFERPOOL BPSEC04K"
            self.create.do_it(self.ins_db2,create_sql)
            status = 0
        tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        return row_num

    def config_systemuser(self,row_num=0, col_num=0):
        tk.Label(self.container,text='Systemuser',font=(22),fg='blue').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Check',font=(22),fg='blue').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Create',font=(22),fg='blue').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        connect_user = self.con_usr.get()
        connect_user = connect_user.upper()
        admin_user = self.adm_usr.get()
        admin_user = admin_user.upper()
        secure_user = self.sec_usr.get()
        secure_user = secure_user.upper()
        row_num += 2
        tk.Label(self.container,text="Connect-User",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
        check_sql = f"SELECT count(*) AS cnt FROM syscat.dbauth WHERE GRANTEE = '{connect_user}' AND CONNECTAUTH ='Y'"
        if self.check.do_it(self.ins_db2,check_sql):
            status = 1
        else:
            create_sql = f"GRANT CONNECT ON DATABASE TO USER {connect_user}"
            self.create.do_it(self.ins_db2,create_sql)
            self.create.do_it(self.ins_db2,create_sql)
            status = 0
        tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        tk.Label(self.container,text="Admin-User",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
        check_sql = f"SELECT count(*) AS cnt FROM syscat.dbauth WHERE GRANTEE = '{admin_user}' AND DBADMAUTH ='Y'"
        if self.check.do_it(self.ins_db2,check_sql):
            status = 1
        else:
            create_sql = f"GRANT DBADM ON DATABASE TO USER {admin_user}"
            self.create.do_it(self.ins_db2,create_sql)
            status = 0
        tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        tk.Label(self.container,text="Security-User",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
        check_sql = f"SELECT count(*) AS cnt FROM syscat.dbauth WHERE GRANTEE = '{secure_user}' AND SECURITYADMAUTH ='Y'"
        if self.check.do_it(self.ins_db2,check_sql):
            status = 1
        else:
            create_sql = f"GRANT SECADM ON DATABASE TO USER {secure_user}"
            self.create.do_it(self.ins_db2,create_sql)
            status = 0
        tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        #
        check_sql = f"SELECT count(*) AS cnt FROM syscat.surrogateauthids WHERE \
            TRUSTEDID = '{connect_user}' AND SURROGATEAUTHID = '{admin_user}'"
        if self.check.do_it(self.ins_db2,check_sql):
            status = 1
        else:
            create_sql = f"GRANT SETSESSIONUSER ON USER {admin_user} TO USER {connect_user}"
            self.create.do_it(self.ins_db2,create_sql)
            status = 0
        check_sql = f"SELECT count(*) AS cnt FROM syscat.surrogateauthids WHERE \
            TRUSTEDID = '{connect_user}' AND SURROGATEAUTHID = '{secure_user}'"
        if self.check.do_it(self.ins_db2,check_sql):
            status = 1
        else:
            create_sql = f"GRANT SETSESSIONUSER ON USER {secure_user} TO USER {connect_user}"
            self.create.do_it(self.ins_db2,create_sql)
            status = 0
        row_num += 2
        return row_num

    def switch_to_adm_usr(self):
        if self.con_db2 == True:
            admin_user = self.adm_usr.get()
            admin_user = admin_user.upper()
            create_sql = f"SET SESSION_USER = {admin_user}"
            self.create.do_it(self.con_db2,create_sql)

    def create_table(self,row_num=0, col_num=0):
        tk.Label(self.container,text='Table',font=(22),fg='blue').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Check',font=(22),fg='blue').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Create',font=(22),fg='blue').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        obj_dict = {'T_USER':T_USER,'T_ROLE':T_ROLE,'T_SCHEMA':T_SCHEMA,'T_TABLE':T_TABLE,'T_ROUTINE':T_ROUTINE,'T_SEQUENCE':T_SEQUENCE,'T_LOG2':T_LOG2}
        for name in obj_dict.keys():
            tk.Label(self.container,text=f"{name}",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
            check_sql = f"SELECT count(*) AS cnt FROM syscat.tables WHERE tabschema = 'SEC' AND tabname = '{name}'"
            if self.check.do_it(self.ins_db2,check_sql):
                status = 1
            else:
                self.create.do_it(self.ins_db2,obj_dict[name])
                status = 0
            tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
            tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
            row_num += 2
        obj_dict = {'T_USR2ROL':T_USR2ROL,'T_SCH2ROL':T_SCH2ROL,'T_TBL2ROL':T_TBL2ROL,'T_ROU2ROL':T_ROU2ROL,'T_SEQ2ROL':T_SEQ2ROL}
        for name in obj_dict.keys():
            tk.Label(self.container,text=f"{name}",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
            check_sql = f"SELECT count(*) AS cnt FROM syscat.tables WHERE tabschema = 'SEC' AND tabname = '{name}'"
            if self.check.do_it(self.ins_db2,check_sql):
                status = 1
            else:
                self.create.do_it(self.ins_db2,obj_dict[name])
                status = 0
            tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
            tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
            row_num += 2
        return row_num

    def create_index(self,row_num=0,col_num=0):
        tk.Label(self.container,text='Index',font=(22),fg='blue').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Check',font=(22),fg='blue').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Create',font=(22),fg='blue').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        obj_dict = {'X_USER':X_USER,'X_ROLE':X_ROLE,'X_SCHEMA':X_SCHEMA,'X_TABLE':X_TABLE,\
            'X_ROUTINE':X_ROUTINE,'X_SEQUENCE':X_SEQUENCE,'X_LOG2':X_LOG2}
        for name in obj_dict.keys():
            tk.Label(self.container,text=f"{name}",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
            check_sql = f"SELECT count(*) AS cnt FROM syscat.indexes WHERE indschema = 'SEC' AND indname = '{name}'"
            if self.check.do_it(self.ins_db2,check_sql):
                status = 1
            else:
                self.create.do_it(self.ins_db2,obj_dict[name])
                status = 0
            tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
            tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
            row_num += 2
        obj_dict = {'X_USR2ROL':X_USR2ROL,'X_SCH2ROL':X_SCH2ROL,'X_TBL2ROL':X_TBL2ROL,\
            'X_ROU2ROL':X_ROU2ROL,'X_SEQ2ROL':X_SEQ2ROL}
        for name in obj_dict.keys():
            tk.Label(self.container,text=f"{name}",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
            check_sql = f"SELECT count(*) AS cnt FROM syscat.indexes WHERE indschema = 'SEC' AND indname = '{name}'"
            if self.check.do_it(self.ins_db2,check_sql):
                status = 1
            else:
                self.create.do_it(self.ins_db2,obj_dict[name])
                status = 0
            tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
            tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
            row_num += 2
        obj_dict = {'X_ROLE_U':X_ROLE_U,'X_ROUTINE_U':X_ROUTINE_U,'X_SCHEMA_U':X_SCHEMA_U,'X_SEQUENCE_U':X_SEQUENCE_U,\
            'X_TABLE_U':X_TABLE_U,'X_USER_U':X_USER_U,'X_ROU2ROL_U':X_ROU2ROL_U,'X_SCH2ROL_U':X_SCH2ROL_U,'X_SEQ2ROL_U':X_SEQ2ROL_U,\
            'X_TBL2ROL_U':X_TBL2ROL_U,'X_USR2ROL_U':X_USR2ROL_U}
        for name in obj_dict.keys():
            tk.Label(self.container,text=f"{name}",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
            check_sql = f"SELECT count(*) AS cnt FROM syscat.indexes WHERE indschema = 'SEC' AND indname = '{name}'"
            if self.check.do_it(self.ins_db2,check_sql):
                status = 1
            else:
                self.create.do_it(self.ins_db2,obj_dict[name])
                status = 0
            tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
            tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
            row_num += 2
        return row_num

    def create_view(self,row_num=0,col_num=0):
        tk.Label(self.container,text='View',font=(22),fg='blue').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Check',font=(22),fg='blue').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Create',font=(22),fg='blue').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        obj_dict = {'V_ROUTINEAUTH':V_ROUTINEAUTH,'V_USR2ROL':V_USR2ROL,'V_SCH2ROL':V_SCH2ROL,'V_TBL2ROL':V_TBL2ROL,'V_ROU2ROL':V_ROU2ROL,\
            'V_SEQ2ROL':V_SEQ2ROL,'V_REVOKE_USER':V_REVOKE_USER,'V_REVOKE_ROLE':V_REVOKE_ROLE,'V_REVOKE_ROLE_ACCESS':V_REVOKE_ROLE_ACCESS,\
            'V_REVOKE_TABLE_ACCESS':V_REVOKE_TABLE_ACCESS,'V_REVOKE_ROUTINE_ACCESS':V_REVOKE_ROUTINE_ACCESS,\
            'V_REVOKE_SEQUENCE_ACCESS':V_REVOKE_SEQUENCE_ACCESS,'V_GRANT_USER':V_GRANT_USER,'V_GRANT_ROLE':V_GRANT_ROLE,\
            'V_GRANT_ROLE_ACCESS':V_GRANT_ROLE_ACCESS,'V_GRANT_TABLE_ACCESS':V_GRANT_TABLE_ACCESS,'V_GRANT_ROUTINE_ACCESS':V_GRANT_ROUTINE_ACCESS,\
            'V_GRANT_SEQUENCE_ACCESS':V_GRANT_SEQUENCE_ACCESS}
        for name in obj_dict.keys():
            tk.Label(self.container,text=f"{name}",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
            check_sql = f"SELECT count(*) AS cnt FROM syscat.views WHERE viewschema = 'SEC' AND viewname = '{name}'"
            if self.check.do_it(self.ins_db2,check_sql):
                status = 1
            else:
                self.create.do_it(self.ins_db2,obj_dict[name])
                status = 0
            tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
            tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
            row_num += 2
        return row_num

    def create_security_proc(self,row_num=0,col_num=0):
        tk.Label(self.container,text='Security-Procedure',font=(22),fg='blue').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Check',font=(22),fg='blue').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text='Create',font=(22),fg='blue').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        obj_dict = {'SECURITY2':SECURITY2}
        row_num += 2
        tk.Label(self.container,text=f"SECURITY2",bg='white').grid(row=row_num,column=col_num,padx=3,pady=3,sticky=('W'))
        check_sql = f"SELECT count(*) AS cnt FROM syscat.procedures WHERE procschema = 'SEC' AND procname = 'SECURITY2'"
        if self.check.do_it(self.ins_db2,check_sql):
            status = 1
        else:
            self.create.do_it(self.ins_db2,obj_dict['SECURITY2'])
            status = 0
        tk.Label(self.container,text=self.CHECK_TXT[status],bg='white').grid(row=row_num,column=col_num+1,padx=3,pady=3,sticky=('E','W'))
        tk.Label(self.container,text=self.CREAT_TXT[status],bg='white').grid(row=row_num,column=col_num+2,padx=3,pady=3,sticky=('E','W'))
        row_num += 2
        return row_num

    def grant_sec_usr(self):
        tab_name_list:list = []
        sec_user = self.sec_usr.get()
        sec_user = sec_user.upper()
        sql = "SELECT tabname AS tabname FROM syscat.tables WHERE tabschema = 'SEC'"
        self.ins_db2.exec(sql)
        name = self.ins_db2.fetch()
        while name != False:
            tab_name_list.append(name['TABNAME'])
            name = self.ins_db2.fetch()
        for tab_name in tab_name_list:
            sql = f"GRANT DELETE, INSERT, SELECT, UPDATE ON TABLE SEC.{tab_name} TO USER {sec_user}"
            self.ins_db2.exec(sql)
        sql = f"GRANT EXECUTE ON PROCEDURE SEC.SECURITY2 TO USER {sec_user}"
        self.ins_db2.exec(sql)

    def insert_defaults(self):
        admin_user = self.adm_usr.get()
        admin_user = admin_user.upper()
        con_user = self.con_usr.get()
        con_user = con_user.upper()
        sec_user = self.sec_usr.get()
        sec_user = sec_user.upper()
        check_sql = f"SELECT COUNT(*) AS cnt FROM sec.t_user WHERE usr_name ='{admin_user}'"
        if self.check.do_it(self.ins_db2,check_sql):
            pass
        else:
            create_sql = f"INSERT INTO SEC.T_USER (usr_id,usr_name,usr_connect,usr_start) VALUES (-1,'{admin_user}','{con_user}','1900-01-01')"
            self.create.do_it(self.ins_db2,create_sql)
        check_sql = f"SELECT COUNT(*) AS cnt FROM sec.t_user WHERE usr_name ='{sec_user}'"
        if self.check.do_it(self.ins_db2,check_sql):
            pass
        else:
            create_sql = f"INSERT INTO SEC.T_USER (usr_id,usr_name,usr_connect,usr_start) VALUES (-2,'{sec_user}','{con_user}','1900-01-01')"
            self.create.do_it(self.ins_db2,create_sql)
        check_sql = "SELECT COUNT(*) AS cnt FROM sec.t_role WHERE rol_name = 'SEC_CONNECT'"
        if self.check.do_it(self.ins_db2,check_sql):
            self.activate_default(sec_user)
        else:
            create_sql = f"INSERT INTO SEC.T_ROLE (rol_id,rol_name,rol_start) VALUES (-1,'SEC_CONNECT','1900-01-01')"
            self.create.do_it(self.ins_db2,create_sql)
            self.activate_default(sec_user)

    def activate_default(self,sec_user):
        sql = f"SET SESSION_USER = {sec_user}"
        self.con_db2.exec(sql)
        sql = f"CREATE ROLE SEC_CONNECT"
        self.con_db2.exec(sql)
        sql = f"GRANT CONNECT ON DATABASE TO ROLE SEC_CONNECT"
        self.con_db2.exec(sql)
        sql = f"CREATE ROLE SEC_LOAD"
        self.con_db2.exec(sql)
        sql = f"GRANT LOAD ON DATABASE TO ROLE SEC_LOAD"
        self.con_db2.exec(sql)
        sql = f"INSERT INTO sec.t_role (rol_id,rol_name,rol_start,rol_end,rol_type) VALUES (-2,'SEC_LOAD','1900-01-01','2999-12-31','RBAC')"
        self.con_db2.exec(sql)



if __name__ == '__main__':
    root = Gui()
    setup = Setup(root)
    root.mainloop()

